
pipeline {
         agent any
         environment{
             PROJECT_ID = 'adminpage-chicago'
             CLUSTER_NAME = 'cluster-test-adminpage'
             LOCATION = 'us-central1-c'
             CREDENTIALS_ID = 'gke'
             registry = "pavlohortovenko20/adminpage2.1:${env.BUILD_NUMBER}"
             registryCredential ='dockerhub_cred'
             image_tag='latest'
             GOOGLE_CLIENT_ID = credentials('GOOGLE_CLIENT_ID')
             GOOGLE_CLIENT_SECRET = credentials('GOOGLE_CLIENT_SECRET')
             GOOGLE_CALLBACK = credentials('GOOGLE_CALLBACK')
             GOOGLE_REFRESH_TOKEN = credentials('GOOGLE_REFRESH_TOKEN')
             DOMAIN = credentials('DOMAIN_TEST')
             squareApplicationId = credentials('squareApplicationId')
             SQUARE_TOKEN = credentials('SQUARE_TOKEN')
             squareBasePath = credentials('squareBasePath')
             SQUARE_LOCATION_ID = credentials('SQUARE_LOCATION_ID')
             CORPORATE_EMAIL = credentials('CORPORATE_EMAIL')
            }
         stages {
                 stage('Checout') {
                 steps {
                     checkout([$class: 'GitSCM', branches: [[name: '*/develop']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/carrectly/adminpage.git']]])
                        }
                     }   
                 stage('Build') {
                 steps  {
                     script {
                        echo "DOMAIN = ${DOMAIN} >>.env"
                        echo "GOOGLE_CLIENT_SECRET = ${GOOGLE_CLIENT_SECRET} >>.env"
                        echo "GOOGLE_CLIENT_ID = ${GOOGLE_CLIENT_ID} >>.env"
                        echo "GOOGLECOLLBACK = ${GOOGLE_CALLBACK} >>.env"
                        echo "GOOGLE_REFRESH_TOKEN = ${GOOGLE_REFRESH_TOKEN} >>.env"
                        echo "squareApplicationId = ${squareApplicationId} >>.env"
                        echo "SQUARE_TOKEN = ${SQUARE_TOKEN} >>.env"
                        echo "squareBasePath = ${squareBasePath}"
                        echo "SQUARE_LOCATION_ID = ${SQUARE_LOCATION_ID} >>.env"
                        echo "CORPORATE_EMAIL = ${CORPORATE_EMAIL} >>.env"
                        dockerImage=docker.build registry 
                        }
                    }
                 }
                stage('Push image to registry') {
                 steps {
                     script{ 
                          docker.withRegistry( '', registryCredential ) {
                          dockerImage.push("${env.BUILD_NUMBER}")
                            }
                        }
                    }
                }
                stage('Remove older images') {
                 steps {
                         sh 'docker rmi $(docker images -q)'
                        }
                }
                stage('Set image by k8s') {
                    steps {
                        sh "sed -i.bak 's|<imageTag>|${registry}|' ./adminpage-deploy.yaml"
                    }
                }
                 stage('Deploy to GKE') { 
                 steps { 
                    step([
                    $class: 'KubernetesEngineBuilder',
                    projectId: env.PROJECT_ID,
                    clusterName: env.CLUSTER_NAME,
                    location: env.LOCATION,
                    manifestPattern: 'adminpage-deploy.yaml',
                    credentialsId: env.CREDENTIALS_ID,
                    verifyDeployments: true])
                    }
                }
            }
        }